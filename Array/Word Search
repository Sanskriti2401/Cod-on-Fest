class Solution {
public:
    
    bool dfs(int i,int j,vector<vector<char>>& b,vector<vector<char>>&v,string w,int index)
    {
        int m=b.size(),n=b[0].size();
        if(index==w.length()-1)
            return true;
        
        v[i][j]=1;
        
        if(i>0 && b[i-1][j]==w[index+1] && v[i-1][j]==0 && dfs(i-1,j,b,v,w,index+1))
            return true;
        
         if(j<n-1 && b[i][j+1]==w[index+1] && v[i][j+1]==0 && dfs(i,j+1,b,v,w,index+1))
            return true;
        
         if(i<m-1 && b[i+1][j]==w[index+1] && v[i+1][j]==0 && dfs(i+1,j,b,v,w,index+1))
            return true;
        
         if(j>0 && b[i][j-1]==w[index+1] && v[i][j-1]==0 && dfs(i,j-1,b,v,w,index+1))
            return true;
        
        v[i][j]=0;
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        
        int m=board.size(),n=board[0].size();
        
        
        vector<vector<char>>v(m,vector<char>(n,0));
        
        int i,j;
        for(i=0;i<m;i++)
        {
            for(j=0;j<n;j++)
            {
                if(board[i][j]==word[0] && dfs(i,j,board,v,word,0))
                        return true;
            }
        }
        return false;
        
    
        
       
        
    }
};
